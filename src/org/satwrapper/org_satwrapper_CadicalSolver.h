/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_satwrapper_CadicalSolver */

#ifndef _Included_org_satwrapper_CadicalSolver
#define _Included_org_satwrapper_CadicalSolver
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    create
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_satwrapper_CadicalSolver_create
  (JNIEnv *, jclass);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    delete
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_delete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_frozen
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_org_satwrapper_CadicalSolver_cadical_1frozen
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_freeze
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1freeze
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_melt
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1melt
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_fixed
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1fixed
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_add_val
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1add_1val
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_solve
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1solve__J
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_solve
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1solve__JI
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_solve
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1solve__JII
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_solve
 * Signature: (JIII)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1solve__JIII
  (JNIEnv *, jclass, jlong, jint, jint, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_solve
 * Signature: (J[I)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1solve__J_3I
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_val
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_satwrapper_CadicalSolver_cadical_1val
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_assume
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1assume
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_failed
 * Signature: (JI)Z
 */
JNIEXPORT jboolean JNICALL Java_org_satwrapper_CadicalSolver_cadical_1failed
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_add_clause
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1add_1clause__JI
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_add_clause
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1add_1clause__JII
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_add_clause
 * Signature: (JIII)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1add_1clause__JIII
  (JNIEnv *, jclass, jlong, jint, jint, jint);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_add_clause
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_org_satwrapper_CadicalSolver_cadical_1add_1clause__J_3I
  (JNIEnv *, jclass, jlong, jintArray);

/*
 * Class:     org_satwrapper_CadicalSolver
 * Method:    cadical_get_literals
 * Signature: (J)[Z
 */
JNIEXPORT jbooleanArray JNICALL Java_org_satwrapper_CadicalSolver_cadical_1get_1literals
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
